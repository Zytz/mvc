<?xml version="1.0" encoding="UTF-8"?>
<!--跟标签beans，里面配置一个又一个的bean子标签，每一个bean子标签都代表一个类的配置-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.john"/>

<!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="suffix" value=".jsp"/>
        <property name="prefix" value="/WEB-INF/jsp"/>
    </bean>
    <!--
    自动注册最合适的 处理器映射器，处理器适配器
    -->
    <mvc:annotation-driven conversion-service="conversionService"/>

    <!--注册自定义类型转换器-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.john.convert.DateConvert"></bean>
            </set>
        </property>
    </bean>
    <!--静态资源配置，方案 ——
    添加该标签之后，会在Springmvc上下文定一个
    defaultServletHttpRequestHandle对象，
    会对请求对象逐一检查，如果是一个静态资源请求，会将氢气转由tomcat 默认的servelet处理
    否则由Springmvc来处理  只能放在根目录中执行（局限性；）
    -->
    <mvc:default-servlet-handler/>

    <!--拦截器配置-->
    <mvc:interceptors>
        <!--拦截所有的-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.john.interceptor.MyInterceptor"/>
        </mvc:interceptor>
        <!--拦截所有的,多个拦截器的按照配置的顺序处理，堆栈的数据结构-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.john.interceptor.MyInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--方案二： SpringMVC框架自己来处理静态资源
    mapping: 约定的静态资源的URL规则
    location： 指定的静态资源存放的位置
    -->
    <!--<mvc:resources mapping="/resources/**" location="classpath*:/"/>-->
    <!--多元素解析器
    id固定

    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--文件大小设置-->
        <property name="maxUploadSize" value="50000"/>
    </bean>
</beans>